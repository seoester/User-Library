<?php
 require_once "class.databaseconnection.php"; require_once "class.group.php"; require_once "class.mail.php"; require_once "settings.php"; class User { const STATUS_NORMAL = 1; const STATUS_BLOCK = 2; const STATUS_UNAPPROVED = 3; const LOGIN_OK = 1; const LOGIN_WRONGPASSWORD = 2; const LOGIN_USERDOESNOTEXISTS = 3; const LOGIN_BLOCKED = 4; const LOGIN_LOGINDISABLED = 5; const LOGIN_EMAILUNACTIVATED = 6; const LOGIN_UNAPPROVED = 7; const LOGIN_TOOMANYATTEMPTS = 8; const REGISTER_OK = 1; const REGISTER_REGISTERDISABLED = 2; const REGISTER_LOGINNAMEEXISTSALREADY = 3; const REGISTER_USERNAMEEXISTSALREADY = 4; const REGISTER_EMAILEXISTSALREADY = 5; const ACTIVATEEMAIL_OK = 1; const ACTIVATEEMAIL_ALREADYACTIVATED = 2; const ACTIVATEEMAIL_ACTIVATIONCODEWRONG = 3; protected $created = false; protected $hasOpenedOnlineId = false; protected $registeredOnly = false; protected $deleted = false; protected $id; protected $onlineId; protected $settings; protected $dbCache; protected $hookClasses = array(); public function __construct() { $this->dbCache = new Cache(); $this->settings = new UserLibrarySettings(); } public function login($loginname, $password, $force=false) { if ($this->created) throw new Exception("There is already a user assigned"); $settings = $this->settings; if (! $settings::login_enabled) return self::LOGIN_LOGINDISABLED; $status = $this->preCheck($loginname, $db_userid, $db_password, $db_status, $db_loginattempts, $db_cookieString); if ($status != self::LOGIN_OK) return $status; if (!$force) { $status = $this->passwordCheck($password, $db_password); if ($status != self::LOGIN_OK) { $this->finishFaiLogin($db_userid, $db_loginattempts); return $status; } } $status = $this->postCheck($db_status); if ($status != self::LOGIN_OK) { $this->finishUnaLogin($db_userid); return $status; } $this->finishSucLogin($db_userid, $db_cookieString); return self::LOGIN_OK; } public function check() { if ($this->created) throw new Exception("There is already a user assigned"); $this->cleanOnlineTable(); if (isset($_COOKIE["USER_sessionid"]) && strlen($_COOKIE["USER_sessionid"]) > 0) { if (isset($_COOKIE['USER_cookie_string']) && strlen($_COOKIE['USER_cookie_string']) > 0 && $this->isUserInDataBase($_COOKIE["USER_sessionid"], false, $userid) && $this->checkCookieString($userid, $_COOKIE['USER_cookie_string'])) { $this->hasOpenedOnlineId = true; $this->id = $userid; $this->updateOnlineTable(); $this->onlineId = $this->getOnlineIdFromDatabase(); } } else { $sessionId = self::genCode(100); setcookie("USER_sessionid", $sessionId, 0, "/"); $_COOKIE["USER_sessionid"] = $sessionId; ($this->isUserInDatabase($_COOKIE["USER_sessionid"], true))? $this->updateOnlineTable(true) : $this->insertInOnlineTable(true); $this->id = 0; } $this->created = true; } public function openWithId($userid) { if ($this->created) throw new Exception("There is already a user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users` WHERE `id`=?"); $stmt->bind_param("i", $userid); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); $this->id = $userid; $this->created = true; return true; } $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` WHERE `id`=?"); $stmt->bind_param("i", $userid); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); $this->id = $userid; $this->created = true; $this->registeredOnly = true; return true; } $stmt->close(); return false; } public function logout() { if (! $this->created || $this->deleted || ! $this->hasOpenedOnlineId) throw new Exception("There is no user assigned"); $this->deleteFromOnlineTable(); setcookie($_COOKIE["USER_sessionid"], ' ', time()-3600); setcookie('USER_cookie_string', ' ', time()-3600); $this->dbCache->unsetField("onlineid"); return true; } public function block() { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $status = $this->getRawStatus(); if ($status == 12 || $status == 11) return false; $returnValue = false; $dbCon = DatabaseConnection::getDatabaseConnection(); if ($status == 100) $blockStatus = 12; else $blockStatus = 11; $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `status`=? WHERE `id`=? LIMIT 1"); $stmt->bind_param("ii", $blockStatus, $this->id); $stmt->execute(); if ($dbCon->affected_rows() == 1) $returnValue = true; $stmt->close(); $this->dbCache->setField("rawstatus", $blockStatus); return $returnValue; } public function unblock() { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $status = $this->getRawStatus(); $blocked = true; $returnValue = false; if ($status == 12) $oldStatus = 100; elseif ($status == 11) $oldStatus = 1; else $blocked = false; if ($blocked) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `status`=? WHERE `id`=? LIMIT 1"); $stmt->bind_param("ii", $oldStatus, $this->id); $stmt->execute(); if ($dbCon->affected_rows() == 1) $returnValue = true; $stmt->close(); $this->dbCache->setField("rawstatus", $oldStatus); } return $returnValue; } public function getStatus() { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $status = $this->getRawStatus(); if ($status == 100) return self::STATUS_NORMAL; elseif ($status == 11 || $status == 12) return self::STATUS_BLOCK; elseif ($status == 1) return self::STATUS_UNAPPROVED; else return false; } public function approve() { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $status = $this->getRawStatus(); if ($status == 11) $newStatus = 12; elseif ($status == 12 || $status == 100) return false; else $newStatus = 100; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `status`='100' WHERE `id`=?"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->close(); $this->dbCache->setField("rawstatus", $newStatus); return true; } public function hasOpenedOnlineId() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); return $this->hasOpenedOnlineId; } public function getId() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); return $this->id; } public function getEmail() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("email")) return $this->dbCache->getField("email"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("SELECT `email` FROM `{dbpre}$table` WHERE `id`=?"); $returnValue = false; $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($email); if ($stmt->fetch()) { $returnValue = $email; $this->dbCache->setField("email", $email); } $stmt->close(); return $returnValue; } public function setEmail($email) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("UPDATE `{dbpre}$table` SET `email`=? WHERE `id`=?"); $stmt->bind_param("si", $email, $this->id); $stmt->execute(); $this->dbCache->setField("email", $email); $stmt->close(); } public function getUsername() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("username")) return $this->dbCache->getField("username"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $returnValue = false; $stmt = $dbCon->prepare("SELECT `username` FROM `{dbpre}$table` WHERE `id`=?"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($username); if ($stmt->fetch()) { $returnValue = $username; $this->dbCache->setField("username", $username); } $stmt->close(); return $returnValue; } public function setUsername($username) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("UPDATE `{dbpre}$table` SET `username`=? WHERE `id`=?"); $stmt->bind_param("si", $username, $this->id); $stmt->execute(); $this->dbCache->setField("username", $username); $stmt->close(); } public function getLoginname() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("loginname")) return $this->dbCache->getField("loginname"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $returnValue = false; $stmt = $dbCon->prepare("SELECT `login` FROM `{dbpre}$table` WHERE `id`=?"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($loginname); if ($stmt->fetch()) { $returnValue = $loginname; $this->dbCache->setField("loginname", $loginname); } $stmt->close(); return $returnValue; } public function setLoginname($loginname) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("UPDATE `{dbpre}$table` SET `login`=? WHERE `id`=?"); $stmt->bind_param("si", $loginname, $this->id); $stmt->execute(); $this->dbCache->setField("loginname", $loginname); $stmt->close(); } public function setPassword($password) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); $settings = $this->settings; $encodedPassword = $this->encodePassword($password, null); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("UPDATE `{dbpre}$table` SET `password`=? WHERE `id`=?"); $stmt->bind_param("si", $encodedPassword, $this->id); $stmt->execute(); $stmt->close(); $this->dbCache->setField("checkpassword_$password", true); return true; } public function checkPassword($password) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("checkpassword_$password")) return $this->dbCache->getField("checkpassword_$password"); if (! (isset($password) && strlen($password) > 0)) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $stmt = $dbCon->prepare("SELECT `password` FROM `{dbpre}$table` WHERE id=? LIMIT 1"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($realPassword); $stmt->fetch(); $stmt->close(); $encodedGivenPassword = self::encodePassword($password, $realPassword); $this->dbCache->setField("checkpassword_$password", $isCorrect = ($encodedGivenPassword === $realPassword)); return $isCorrect; } public function getGroups($limit=null, $skip=null) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $limitCommand = ""; if (is_int($limit)) $limitCommand = is_int($skip)? " LIMIT $skip, $limit" : " LIMIT $limit"; elseif (is_int($skip)) throw new Exception("Cannot skip without limiting"); $groupArray = array(); $groupIds = array(); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `groupid` FROM `{dbpre}user_groups` WHERE `userid`=?$limitCommand"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($groupId); while ($stmt->fetch()) $groupIds[] = $groupId; $stmt->close(); foreach ($groupIds as $groupId) { $group = new Group(); $group->openWithId($groupId); $groupArray[] = $group; } return $groupArray; } public function inGroup($groupId) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("ingroup_$groupId")) return $this->dbCache->getField("ingroup_$groupId"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `level` FROM `{dbpre}user_groups` WHERE `userid`=? AND `groupid`=?"); $stmt->bind_param("ii", $this->id, $groupId); $stmt->execute(); $stmt->bind_result($level); if ($stmt->fetch()) $inGroup = true; else $inGroup = false; $stmt->close(); $this->dbCache->setField("ingroup_$groupId", $inGroup); return $inGroup; } public function addGroup($groupId, $level=50) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if (!( $level >= 0 && $level <= 100)) return false; if ($this->inGroup($groupId)) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("INSERT INTO `{dbpre}user_groups` (`userid`, `groupid`, `level`) VALUES (?, ?, ?)"); $stmt->bind_param("iii", $this->id, $groupId, $level); $stmt->execute(); $stmt->close(); $this->dbCache->setField("ingroup_$groupId", true); $this->dbCache->setField("ingrouplevel_$groupId", $level); return true; } public function removeGroup($groupId) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if (! $this->inGroup($groupId)) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("DELETE FROM `{dbpre}user_groups` WHERE `userid`=? AND `groupid`=? LIMIT 1"); $stmt->bind_param("ii", $this->id, $groupId); $stmt->execute(); $stmt->close(); $this->dbCache->setField("ingroup_$groupId", false); $this->dbCache->unsetField("ingrouplevel_$groupId"); return true; } public function getInGroupLevel($groupId) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("ingrouplevel_$groupId")) return $this->dbCache->getField("ingrouplevel_$groupId"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `level` FROM `{dbpre}user_groups` WHERE `userid`=? AND `groupid`=? LIMIT 1"); $stmt->bind_param("ii", $this->id, $groupId); $stmt->execute(); $stmt->bind_result($level); if ($stmt->fetch()) ; else $level = false; $stmt->close(); $this->dbCache->setField("ingrouplevel_$groupId", $level); return $level; } public function setInGroupLevel($groupId, $level) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if (!( $level >= 0 && $level <= 100)) return false; if (!$this->inGroup($groupId)) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}user_groups` SET `level`=? WHERE `userid`=? AND `groupid`=? LIMIT 1"); $stmt->bind_param("iii", $level, $this->id, $groupId); $stmt->execute(); $stmt->close(); $this->dbCache->setField("ingrouplevel_$groupId", $level); return true; } public function hasOwnPermission($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("hasownpermission_$name")) return $this->dbCache->getField("hasownpermission_$name"); $permissionId = $this->convertPermissionTitleToId($name); if ($permissionId === null) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}user_permissions` WHERE `userid`=? AND `permissionid`=? LIMIT 1"); $stmt->bind_param("ii", $this->id, $permissionId); $stmt->execute(); $stmt->bind_result($mappingId); if ($stmt->fetch()) $hasPermission = true; else $hasPermission = false; $stmt->close(); $this->dbCache->setField("hasownpermission_$name", $hasPermission); return $hasPermission; } public function addPermission($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->hasOwnPermission($name)) return false; $permissionId = $this->convertPermissionTitleToId($name); if ($permissionId === null) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("INSERT INTO `{dbpre}user_permissions` (`userid`, `permissionid`) VALUES (?, ?)"); $stmt->bind_param("ii", $this->id, $permissionId); $stmt->execute(); $stmt->close(); $this->dbCache->setField("hasownpermission_$name", true); $this->dbCache->setField("haspermission_$name", true); return true; } public function removePermission($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if (! $this->hasOwnPermission($name)) return false; $permissionId = $this->convertPermissionTitleToId($name); if ($permissionId === null) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("DELETE FROM `{dbpre}user_permissions` WHERE `userid`=? AND `permissionid`=? LIMIT 1"); $stmt->bind_param("ii", $this->id, $permissionId); $stmt->execute(); $stmt->close(); $this->dbCache->setField("hasownpermission_$name", false); $this->dbCache->unsetField("haspermission_$name"); return true; } public function hasPermission($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->hasOwnPermission($name)) return true; $permissionId = $this->convertPermissionTitleToId($name); if ($permissionId === null) return false; $dbCon = DatabaseConnection::getDatabaseConnection(); $returnValue = false; $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}group_permissions` WHERE `groupid`=? AND `permissionid`=? LIMIT 1"); $groups = $this->getGroups(); foreach ($groups as $group) { $groupId = $group->getId(); $stmt->bind_param("ii", $groupId, $permissionId); $stmt->execute(); $stmt->bind_result($mappingId); if ($stmt->fetch()) { $returnValue = true; break; } } $stmt->close(); return $returnValue; } public function saveSessionVar($title, $value) { if (! $this->created || $this->deleted || ! $this->hasOpenedOnlineId) throw new Exception("There is no user assigned"); $onlineId = $this->getOnlineId(); $dbCon = DatabaseConnection::getDatabaseConnection(); $searchStmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}sessionsvars` WHERE `title`=? AND `onlineid`=? LIMIT 1"); $searchStmt->bind_param("si", $title, $onlineId); $searchStmt->execute(); $searchStmt->store_result(); $searchStmt->bind_result($sessionVarid); if ($searchStmt->num_rows > 0) { $searchStmt->fetch(); $searchStmt->close(); $updateStmt = $dbCon->prepare("UPDATE `{dbpre}sessionsvars` SET `value`=? WHERE `id`=? LIMIT 1"); $serialziedVar = serialize($value); $updateStmt->bind_param("si", $serialziedVar, $sessionVarid); $updateStmt->execute(); $updateStmt->close(); } else { $searchStmt->close(); $insertStmt = $dbCon->prepare("INSERT INTO `{dbpre}sessionsvars` (`onlineid`, `title`, `value`) VALUES (?, ?, ?)"); $serialziedVar = serialize($value); $insertStmt->bind_param("iss", $onlineId, $title, $serialziedVar); $insertStmt->execute(); $insertStmt->close(); } $this->dbCache->setField("sessionvar_$title", $value); } public function getSessionVar($title) { if (! $this->created || $this->deleted || ! $this->hasOpenedOnlineId) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("sessionvar_$title")) return $this->dbCache->getField("sessionvar_$title"); $onlineId = $this->getOnlineId(); $returnValue = null; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `value` FROM `{dbpre}sessionsvars` WHERE `title`=? AND `onlineid`=? LIMIT 1"); $stmt->bind_param("si", $title, $onlineId); $stmt->execute(); $stmt->store_result(); $stmt->bind_result($value); if ($stmt->num_rows > 0) { $stmt->fetch(); $returnValue = unserialize($value); } $stmt->close(); $this->dbCache->setField("sessionvar_$title", $returnValue); return $returnValue; } public function deleteUser() { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $table = ($this->getEmailactivated())? "users" : "registrations"; $delUserStmt = $dbCon->prepare("DELETE FROM `{dbpre}$table` WHERE `id`=? LIMIT 1"); $delUserStmt->bind_param("i", $this->id); $delUserStmt->execute(); $delUserStmt->close(); $delGroupConnectionsStmt = $dbCon->prepare("DELETE FROM `{dbpre}user_groups` WHERE `userid`=? LIMIT 1"); $delGroupConnectionsStmt->bind_param("i", $this->id); $delGroupConnectionsStmt->execute(); $delGroupConnectionsStmt->close(); $delPermissionConnectionsStmt = $dbCon->prepare("DELETE FROM `{dbpre}user_permissions` WHERE `userid`=? LIMIT 1"); $delPermissionConnectionsStmt->bind_param("i", $this->id); $delPermissionConnectionsStmt->execute(); $delPermissionConnectionsStmt->close(); $this->deleted = true; return true; } public function activateEmail($activationCode) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); if ($this->getEmailactivated()) return self::ACTIVATEEMAIL_ALREADYACTIVATED; $settings = new UserLibrarySettings(); $dbCon = DatabaseConnection::getDatabaseConnection(); $checkStmt = $dbCon->prepare("SELECT `login`, `username`, `password`, `email`, `status`, `activationcode`, `secure_cookie_string`, `registerdate` FROM `{dbpre}registrations` WHERE `id`=? LIMIT 1"); $checkStmt->bind_param("i", $this->id); $checkStmt->execute(); $checkStmt->bind_result($db_loginname, $db_username, $db_password, $db_email, $db_status, $db_activationCode, $db_cookieString, $db_registerDate); $checkStmt->fetch(); $checkStmt->close(); if ($activationCode != $db_activationCode) return self::ACTIVATEEMAIL_ACTIVATIONCODEWRONG; else { $activateStmt = $dbCon->prepare("INSERT INTO `{dbpre}users` (`id`, `login`, `username`, `password`, `email`, `status`, `secure_cookie_string`, `registerdate`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"); $activateStmt->bind_param("issssisi", $this->id, $db_loginname, $db_username, $db_password, $db_email, $db_status, $db_cookieString, $db_registerDate); $activateStmt->execute(); $activateStmt->close(); $deleteStmt = $dbCon->prepare("DELETE FROM `{dbpre}registrations` WHERE `id`=? LIMIT 1"); $deleteStmt->bind_param("i", $this->id); $deleteStmt->execute(); $deleteStmt->close(); $this->registeredOnly = false; return self::ACTIVATEEMAIL_OK; } } public function getEmailactivated($echo = false) { if (! $this->created || $this->deleted) throw new Exception("There is no user assigned"); return ! $this->registeredOnly; } public function getAllOnlineIds() { if (! $this->created || $this->deleted) return false; if ($this->dbCache->inCache("allonlineids")) return $this->dbCache->getField("allonlineids"); $allOnlineIds = array(); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}onlineusers` WHERE `userid`=?"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($onlineId); while ($stmt->fetch()) $allOnlineIds[] = $onlineId; $stmt->close(); $this->dbCache->setField("allonlineids", $allOnlineIds); return $allOnlineIds; } public function openOnlineId($onlineId) { if (! $this->created || $this->deleted) return false; if (in_array($onlineId, $this->getAllOnlineIds())) { $this->onlineId = $onlineId; $this->hasOpenedOnlineId = true; } else throw new Exception("There isn't such an online Id"); } public static function create($loginname, $username, $password, $email, $emailActivated=true, $approved="stan", &$userid="unset", $check=false) { $settings = new UserLibrarySettings(); if ($check) { if (! self::checkLoginname($loginname)) return self::REGISTER_LOGINNAMEEXISTSALREADY; elseif (! self::checkUsername($username)) return self::REGISTER_USERNAMEEXISTSALREADY; elseif (! self::checkEmail($email)) return self::REGISTER_EMAILEXISTSALREADY; } $activationCode = self::genCode($settings::length_activationcode); if ($approved == "stan") { if ($settings::need_approval) $finalStatus = 1; else $finalStatus = 100; } else { if ($approved) $finalStatus = 100; else $finalStatus = 1; } $userid = self::writeUserIntoDatabase($loginname, $username, $password, $email, $finalStatus, $emailActivated); } public static function register($loginname, $username, $password, $email, $emailtext, $emailsubject, &$userid="unset") { $settings = new UserLibrarySettings(); if (! $settings::register_enabled) return self::REGISTER_REGISTERDISABLED; elseif (! self::checkLoginname($loginname)) return self::REGISTER_LOGINNAMEEXISTSALREADY; elseif (! self::checkUsername($username)) return self::REGISTER_USERNAMEEXISTSALREADY; elseif (! self::checkEmail($email)) return self::REGISTER_EMAILEXISTSALREADY; $activationCode = self::genCode($settings::length_activationcode); $status = ($settings::need_approval)? 1 : 100; $userid = self::writeUserIntoDatabase($loginname, $username, $password, $email, $status, false, $activationCode); $emailtext = str_replace("[%actcode%]", $activationCode, $emailtext); $emailtext = str_replace("[%username%]", $username, $emailtext); $emailtext = str_replace("[%loginname%]", $loginname, $emailtext); $emailtext = str_replace("[%password%]", $password, $emailtext); $emailtext = str_replace("[%id%]", $userid, $emailtext); self::sendMail($settings::send_mailaddress, $email, $emailsubject, $emailtext); return self::REGISTER_OK; } public static function getAllUsers($limit=null, $skip=null) { $limitCommand = ""; if (is_int($limit)) $limitCommand = is_int($skip)? " LIMIT $skip, $limit" : " LIMIT $limit"; elseif (is_int($skip)) throw new Exception("Cannot skip without limiting"); $users = array(); $userIds = array(); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users`$limitCommand"); $stmt->execute(); $stmt->bind_result($userId); while ($stmt->fetch()) $userIds[] = $userId; $stmt->close(); foreach ($userIds as $userId) { $user = new User(); $user->openWithId($userId); $users[] = $user; } return $users; } public static function getAllOnlineUsers($limit=null, $skip=null) { $limitCommand = ""; if (is_int($limit)) $limitCommand = is_int($skip)? " LIMIT $skip, $limit" : " LIMIT $limit"; elseif (is_int($skip)) throw new Exception("Cannot skip without limiting"); $users = array(); $userIds = array(); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `userid` FROM `{dbpre}onlineusers` WHERE `userid`!='0'$limitCommand"); $stmt->execute(); $stmt->bind_result($userId); while ($stmt->fetch()) $userIds[] = $userId; $stmt->close(); foreach ($userIds as $userId) { $user = new User(); $user->openWithId($userId); $users[] = $user; } return $users; } public function appendHook(UserHooks $hookClass) { $this->hookClasses[] = $hookClass; } public function addCustomField($name, $type) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("ALTER TABLE `{dbpre}users` ADD `custom_$name` $type"); $stmt->execute(); $stmt->close(); } public function removeCustomField($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("ALTER TABLE `{dbpre}users` DROP `custom_$name`"); $stmt->execute(); $stmt->close(); } public function saveCustomField($name, $value) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if (is_integer($value)) $typeAbb ='i'; elseif (is_double($value)) $typeAbb = 'd'; elseif (is_string($value)) $typeAbb = 's'; else $typeAbb = 'b'; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `custom_$name`=? WHERE `id`=?"); $stmt->bind_param($typeAbb . "i", $value, $this->id); $stmt->execute(); $stmt->close(); $this->dbCache->setField("custom_$name", $value); return true; } public function getCustomField($name) { if (! $this->created || $this->deleted || $this->registeredOnly) throw new Exception("There is no user assigned"); if ($this->dbCache->inCache("custom_$name")) return $this->dbCache->getField("custom_$name"); $returnValue = false; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `custom_$name` FROM `{dbpre}users` WHERE `id`=?"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($result); if ($stmt->fetch()) $returnValue = $result; else $returnValue = false; $stmt->close(); $this->dbCache->setField("custom_$name", $returnValue); return $returnValue; } public function getOnlineId() { if (! $this->created || $this->deleted || ! $this->hasOpenedOnlineId) throw new Exception("There is no user assigned"); return $this->onlineId; } private static function encodePassword($password, $passwordHash=null) { switch (UserLibrarySettings::password_algorithm) { case 'scrypt': $keyLength = UserLibrarySettings::password_key_length; if ($passwordHash == null) { $cpuDifficulty = UserLibrarySettings::password_cpu_difficulty; $memDifficulty = UserLibrarySettings::password_mem_difficulty; $parallelDifficulty = UserLibrarySettings::password_parallel_difficulty; $salt = self::genCode(UserLibrarySettings::password_salt_length); } else list($cpuDifficulty, $memDifficulty, $parallelDifficulty, $salt) = explode('$', $passwordHash); $hash = scrypt($password, $salt, $cpuDifficulty, $memDifficulty, $parallelDifficulty, $keyLength); return $cpuDifficulty . '$' . $memDifficulty . '$' . $parallelDifficulty . '$' . $salt . '$' . $hash; break; case 'bcrypt': $keyLength = UserLibrarySettings::password_key_length; if ($passwordHash == null) { $roundInt = UserLibrarySettings::password_rounds; $rounds = (strlen($roundInt) == 1)? "0$roundInt" : $roundInt; $salt = self::genCode(22); $options = '$2a$' . $rounds . '$' . $salt; } else $options = substr($passwordHash, 0, 30); return crypt($password, $options); break; default: throw new Exception("Unsupported password encryption algorithm", 1); break; } } private static function genCode($charNum) { $letters = array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"); $code = ""; for ($i = 0; $i < $charNum; $i++) { $rand = mt_rand(0, 35); $code .= $letters[$rand]; } return $code; } private static function checkUsername($username) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users` WHERE `username`=?"); $stmt->bind_param("s", $username); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` WHERE `username`=?"); $stmt->bind_param("s", $username); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); return true; } private static function checkLoginname($loginname) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users` WHERE `login`=?"); $stmt->bind_param("s", $loginname); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` WHERE `login`=?"); $stmt->bind_param("s", $loginname); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); return true; } private static function checkEmail($email) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users` WHERE `email`=?"); $stmt->bind_param("s", $email); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` WHERE `email`=?"); $stmt->bind_param("s", $email); $stmt->execute(); if ($stmt->fetch()) { $stmt->close(); return false; } $stmt->close(); return true; } private function preCheck($loginname, &$db_userid, &$db_password, &$db_status, &$db_loginattempts, &$db_cookieString) { $settings = $this->settings; $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id`, `password`, `status`, `loginattempts`, `blockeduntil`, `secure_cookie_string` FROM `{dbpre}users` WHERE `login`=? LIMIT 1"); $stmt->bind_param("s", $loginname); $stmt->execute(); $stmt->bind_result($db_userid, $db_password, $db_status, $db_loginattempts, $db_blockeduntil, $db_cookieString); if ($stmt->fetch()) { $stmt->close(); if ($db_loginattempts >= $settings::maxloginattempts && time() < $db_blockeduntil) return self::LOGIN_TOOMANYATTEMPTS; return self::LOGIN_OK; } else { $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` WHERE `login`=? LIMIT 1"); $stmt->bind_param("s", $loginname); $stmt->execute(); $stmt->bind_result($db_userid); if ($stmt->fetch()) { $stmt->close(); return self::LOGIN_EMAILUNACTIVATED; } else { $stmt->close(); return self::LOGIN_USERDOESNOTEXISTS; } } } private function passwordCheck($password, $db_password) { $encodedPassword = self::encodePassword($password, $db_password); if ($encodedPassword == $db_password) return self::LOGIN_OK; return self::LOGIN_WRONGPASSWORD; } private function finishFaiLogin($db_userid, $db_loginattempts) { $settings = $this->settings; $dbCon = DatabaseConnection::getDatabaseConnection(); $loginattempts = $db_loginattempts + 1; $blockeduntil = ($loginattempts >= $settings::maxloginattempts)? time() + $settings::loginblocktime : 0; $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `loginattempts`=?, `blockeduntil`=? WHERE `id`=?"); $stmt->bind_param("iii", $loginattempts, $blockeduntil, $db_userid); $stmt->execute(); $stmt->close(); } private function postCheck($db_status) { if ($db_status == 1) return self::LOGIN_UNAPPROVED; elseif ($db_status == 11 || $db_status == 12) return self::LOGIN_BLOCKED; elseif ($db_status >= 100 && $db_status < 200) return self::LOGIN_OK; else throw new Exception("Unknown status '$db_status'"); } private function finishUnaLogin($db_userid) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `loginattempts`=?, `blockeduntil`=? WHERE `id`=?"); $loginattempts = 0; $blockeduntil = 0; $stmt->bind_param("iii", $loginattempts, $blockeduntil, $db_userid); $stmt->execute(); $stmt->close(); } private function finishSucLogin($db_userid, $db_cookieString) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}users` SET `loginattempts`=?, `blockeduntil`=? WHERE `id`=?"); $loginattempts = 0; $blockeduntil = 0; $stmt->bind_param("iii", $loginattempts, $blockeduntil, $db_userid); $stmt->execute(); $stmt->close(); $sessionId = self::genCode(100); setcookie("USER_sessionid", $sessionId, 0, "/"); $_COOKIE["USER_sessionid"] = $sessionId; setcookie("USER_cookie_string", $db_cookieString, 0, "/"); $this->dbCache->unsetField("onlineid"); $this->created = true; $this->id = $db_userid; $this->insertInOnlineTable(); $this->hasOpenedOnlineId = true; $this->onlineId = $this->getOnlineIdFromDatabase(); $this->callPostLoginHooks($this->id, $this->onlineId); } private function getIp() { if (getenv("HTTP_X_FORWARDED_FOR")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else $ip = getenv("REMOTE_ADDR"); return $ip; } private function getRawStatus() { if ($this->dbCache->inCache("rawstatus")) return $this->dbCache->getField("rawstatus"); $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `status` FROM `{dbpre}users` WHERE `id`=? LIMIT 1"); $stmt->bind_param("i", $this->id); $stmt->execute(); $stmt->bind_result($status); $stmt->fetch(); $stmt->close(); $this->dbCache->setField("rawstatus", $status); return $status; } private function convertPermissionTitleToId($title) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}permissions` WHERE `name`=? LIMIT 1"); $stmt->bind_param("s", $title); $stmt->execute(); $stmt->bind_result($id); if ($stmt->fetch()) { $stmt->close(); return $id; } else { $stmt->close(); $insertStmt = $dbCon->prepare("INSERT INTO `{dbpre}permissions` (`name`) VALUES (?)"); $insertStmt->bind_param("s", $title); $insertStmt->execute(); $id = $dbCon->insert_id(); $insertStmt->close(); return $id; } } private function getOnlineIdFromDatabase() { if ($this->dbCache->inCache("onlineid")) return $this->dbCache->getField("onlineid"); $settings = $this->settings; $session = $_COOKIE['USER_sessionid']; $ipaddress = $this->getIp(); $dbCon = DatabaseConnection::getDatabaseConnection(); if ($settings::securesessions) $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}onlineusers` WHERE `userid`=? AND `session`=? AND `ipaddress`=? LIMIT 1"); else $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}onlineusers` WHERE `userid`=? AND `session`=? LIMIT 1"); if ($settings::securesessions) $stmt->bind_param("iss", $this->id, $session, $ipaddress); else $stmt->bind_param("is", $this->id, $session); $stmt->execute(); $stmt->bind_result($onlineid); $stmt->fetch(); $stmt->close(); $this->dbCache->setField("onlineid", $onlineid); return $onlineid; } private function checkCookieString($id, $cookieString) { if ($this->dbCache->inCache("checkcookie_$cookieString")) return $this->dbCache->getField("checkcookie_$cookieString"); $dbCon = DatabaseConnection::getDatabaseConnection(); $returnValue = false; $stmt = $dbCon->prepare("SELECT `secure_cookie_string` FROM `{dbpre}users` WHERE `id`=? LIMIT 1"); $stmt->bind_param("i", $id); $stmt->execute(); $stmt->bind_result($db_cookieString); if ($stmt->fetch()) if ($cookieString == $db_cookieString) $returnValue = true; $stmt->close(); $this->dbCache->setField("checkcookie_$cookieString", $returnValue); return $returnValue; } private static function writeUserIntoDatabase($loginname, $username, $password, $email, $status, $emailActivated=false, $activationCode=null) { $settings = new UserLibrarySettings(); $dbCon = DatabaseConnection::getDatabaseConnection(); $cookieString = self::genCode(100); $id = self::getLatestId() + 1; $registerDate = time(); $encodedPassword = self::encodePassword($password, null); if ($emailActivated) { $insertStmt = $dbCon->prepare("INSERT INTO `{dbpre}users` (`id`, `login`, `username`, `password`, `email`, `status`, `secure_cookie_string`, `registerdate`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"); $insertStmt->bind_param("issssisi", $id, $loginname, $username, $encodedPassword, $email, $status, $cookieString, $registerDate); } else { $insertStmt = $dbCon->prepare("INSERT INTO `{dbpre}registrations` (`id`, `login`, `username`, `password`, `email`, `status`, `activationcode`, `secure_cookie_string`, `registerdate`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"); if ($activationCode === null) $activationCode = ""; $insertStmt->bind_param("issssissi", $id, $loginname, $username, $encodedPassword, $email, $status, $activationCode, $cookieString, $registerDate); } $insertStmt->execute(); $insertStmt->close(); return $id; } private static function sendMail($FROM, $TO, $SUBJECT, $TEXT) { $mail = new Mail(); $mail->subject = $SUBJECT; $mail->to = $TO; $mail->body = $TEXT; $mail->from = $FROM; return $mail->send(); } private static function getLatestId() { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}users` ORDER BY `id` DESC LIMIT 1"); $stmt->execute(); $stmt->bind_result($latestUserId); $stmt->fetch(); $stmt->close(); $stmt = $dbCon->prepare("SELECT `id` FROM `{dbpre}registrations` ORDER BY `id` DESC LIMIT 1"); $stmt->execute(); $stmt->bind_result($latestRegistrationId); $stmt->fetch(); $stmt->close(); return max($latestUserId, $latestRegistrationId); } private function callPostLoginHooks($userId, $onlineId) { foreach ($this->hookClasses as $hookClass) { $hookClass->login($userId, $onlineId); } } private function callPreLogoutHooks($userId, $onlineId) { foreach ($this->hookClasses as $hookClass) { $hookClass->preLogout($userId, $onlineId); } } private function callPostLogoutHooks($userId, $onlineId) { foreach ($this->hookClasses as $hookClass) { $hookClass->postLogout($userId, $onlineId); } } private function insertInOnlineTable($anon=false) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("INSERT INTO `{dbpre}onlineusers` (`userid`, `session`, `ipaddress`, `lastact`) VALUES (?, ?, ?, ?)"); if (! $anon) $userid = $this->id; else $userid = 0; $sessionId = $_COOKIE["USER_sessionid"]; $ipAddress = $this->getIp(); $actTime = time(); $stmt->bind_param("issi", $userid, $sessionId, $ipAddress, $actTime); $stmt->execute(); $this->onlineId = $dbCon->insert_id(); $stmt->close(); } private function updateOnlineTable($anon=false) { $dbCon = DatabaseConnection::getDatabaseConnection(); $stmt = $dbCon->prepare("UPDATE `{dbpre}onlineusers` SET `lastact`=? WHERE `userid`=? AND `session`=? LIMIT 1"); if (! $anon) $userid = $this->id; else $userid = 0; $sessionId = $_COOKIE["USER_sessionid"]; $actTime = time(); $stmt->bind_param("iis", $actTime, $userid, $sessionId); $stmt->execute(); $stmt->close(); } private function deleteFromOnlineTable() { $this->deleteAllUserDataFromOnlineTable($this->getOnlineId(), $this->getId()); } private function cleanOnlineTable() { $dbCon = DatabaseConnection::getDatabaseConnection(); $settings = $this->settings; $delIds = array(); $actTime = time(); $minLastTime = $actTime - $settings::autologouttime; $searchStmt = $dbCon->prepare("SELECT `id`, `userid` FROM `{dbpre}onlineusers` WHERE `lastact`<?"); $searchStmt->bind_param("i", $minLastTime); $searchStmt->execute(); $searchStmt->bind_result($delOnlineId, $delUserId); while ($searchStmt->fetch()) $delIds[] = array($delOnlineId, $delUserId); $searchStmt->close(); foreach ($delIds as $delId) $this->deleteAllUserDataFromOnlineTable($delId[0], $delId[1]); } private function deleteAllUserDataFromOnlineTable($onlineid, $userid) { $this->callPreLogoutHooks($userid, $onlineid); $dbCon = DatabaseConnection::getDatabaseConnection(); $delVarstmt = $dbCon->prepare("DELETE FROM `{dbpre}sessionsvars` WHERE `onlineid`=? LIMIT 1"); $delStmt = $dbCon->prepare("DELETE FROM `{dbpre}onlineusers` WHERE `id`=?"); $delVarstmt->bind_param("i", $onlineid); $delStmt->bind_param("i", $onlineid); $delVarstmt->execute(); $delVarstmt->close(); $delStmt->execute(); $delStmt->close(); $this->callPostLogoutHooks($userid, $onlineid); } private function isUserInDataBase($session, $anon=false, &$userid=null) { $dbCon = DatabaseConnection::getDatabaseConnection(); $settings = $this->settings; if ($settings::securesessions) $searchStmt = $dbCon->prepare("SELECT `id`, `userid` FROM `{dbpre}onlineusers` WHERE `session`=? AND `ipaddress`=? LIMIT 1"); else $searchStmt = $dbCon->prepare("SELECT `id`, `userid` FROM `{dbpre}onlineusers` WHERE `session`=? LIMIT 1"); $ipaddress = $this->getIp(); if ($settings::securesessions) $searchStmt->bind_param("ss", $session, $ipaddress); else $searchStmt->bind_param("s", $session); $searchStmt->execute(); $searchStmt->bind_result($onlineid, $userid); $this->onlineId = $onlineid; if ($searchStmt->fetch()) { $returnValue = true; } else $returnValue = false; $searchStmt->close(); return $returnValue; } } interface UserHooks { public function postLogin($userId, $onlineId); public function preLogout($userId, $onlineId); public function postLogout($userId, $onlineId); } ?>